// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/copilot-data
// To extend it, create a "EventDate.cs" with this contents:
/*
namespace AppCode.Data
{
  public partial class EventDate
  {
    // Add your own properties and methods here
  }
}
*/

// Generator:   CSharpDataModelsGenerator v17.06.02
// App/Edition: Events, Courses and Registration/
// User:        2sic Web-Developer
// When:        2024-04-08 09:26:47Z
using System;
using ToSic.Sxc.Adam;

namespace AppCode.Data
{
  // This is a generated class for EventDate 
  // To extend/modify it, see instructions above.

  /// <summary>
  /// EventDate data. <br/>
  /// Generated 2024-04-08 09:26:47Z. Re-generate whenever you change the ContentType. <br/>
  /// <br/>
  /// Default properties such as `.Title` or `.Id` are provided in the base class. <br/>
  /// Most properties have a simple access, such as `.Document`. <br/>
  /// For other properties or uses, use methods such as
  /// .IsNotEmpty("FieldName"), .String("FieldName"), .Children(...), .Picture(...), .Html(...).
  /// </summary>
  public partial class EventDate: AutoGenerated.ZagEventDate
  {  }
}

namespace AppCode.Data.AutoGenerated
{
  /// <summary>
  /// Auto-Generated base class for Default.EventDate in separate namespace and special name to avoid accidental use.
  /// </summary>
  public abstract class ZagEventDate: Custom.Data.CustomItem
  {
    /// <summary>
    /// Document as link (url). <br/>
    /// To get the underlying value like 'file:72' use String("Document")
    /// </summary>
    public string Document => _item.Url("Document");

    /// <summary>
    /// Get the file object for Document - or null if it's empty or not referencing a file.
    /// </summary>
    public IFile DocumentFile => _item.File("Document");

    /// <summary>
    /// Get the folder object for Document.
    /// </summary>
    public IFolder DocumentFolder => _item.Folder("Document");

    /// <summary>
    /// End as DateTime.
    /// </summary>
    public DateTime End => _item.DateTime("End");

    /// <summary>
    /// EndDateIsStartDate as bool. <br/>
    /// To get nullable use .Get("EndDateIsStartDate") as bool?;
    /// </summary>
    public bool EndDateIsStartDate => _item.Bool("EndDateIsStartDate");

    /// <summary>
    /// Event as single item of Event.
    /// </summary>
    /// <remarks>
    /// Generated to only return 1 child because field settings had Multi-Value=false. The type Event was specified in the field settings.
    /// </remarks>
    /// <returns>
    /// A single item OR null if nothing found, so you can use ?? to provide alternate objects.
    /// </returns>
    public Event Event => _event ??= _item.Child<Event>("Event");
    private Event _event;

    /// <summary>
    /// Fee as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Fee", scrubHtml: true) etc.
    /// </summary>
    public string Fee => _item.String("Fee", fallback: "");

    /// <summary>
    /// Id as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Id", scrubHtml: true) etc.
    /// </summary>
    /// <remarks>
    /// This hides base property Id.
    /// To access original, convert using AsItem(...) or cast to ITypedItem.
    /// Consider renaming this field in the underlying content-type.
    /// </remarks>
    public new string Id => _item.String("Id", fallback: "");

    /// <summary>
    /// IsCancelled as bool. <br/>
    /// To get nullable use .Get("IsCancelled") as bool?;
    /// </summary>
    public bool IsCancelled => _item.Bool("IsCancelled");

    /// <summary>
    /// IsFullyBooked as bool. <br/>
    /// To get nullable use .Get("IsFullyBooked") as bool?;
    /// </summary>
    public bool IsFullyBooked => _item.Bool("IsFullyBooked");

    /// <summary>
    /// Location as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Location", scrubHtml: true) etc.
    /// </summary>
    public string Location => _item.String("Location", fallback: "");

    /// <summary>
    /// Person as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Person", scrubHtml: true) etc.
    /// </summary>
    public string Person => _item.String("Person", fallback: "");

    /// <summary>
    /// RegistrationEnabled as bool. <br/>
    /// To get nullable use .Get("RegistrationEnabled") as bool?;
    /// </summary>
    public bool RegistrationEnabled => _item.Bool("RegistrationEnabled");

    /// <summary>
    /// Seats as int. <br/>
    /// To get other types use methods such as .Decimal("Seats")
    /// </summary>
    public int Seats => _item.Int("Seats");

    /// <summary>
    /// Start as DateTime.
    /// </summary>
    public DateTime Start => _item.DateTime("Start");

    /// <summary>
    /// TimeSpecifics as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("TimeSpecifics", scrubHtml: true) etc.
    /// </summary>
    public string TimeSpecifics => _item.String("TimeSpecifics", fallback: "");

    /// <summary>
    /// TitleAddition as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("TitleAddition", scrubHtml: true) etc.
    /// </summary>
    public string TitleAddition => _item.String("TitleAddition", fallback: "");
  }
}