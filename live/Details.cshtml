@inherits Custom.Hybrid.RazorPro
@using ToSic.Razor.Blade;

@{
  // get some helper functions for later on
  var helpers = GetCode("DetailsHelpers.cs");

  // Data from Query - Stream "Event" contains the event, "Current" contains the selected date (if any)
  var eventData = AsItems(MyData["Event"]).FirstOrDefault();

  var firstEventDate = AsItems(MyData["Current"]).FirstOrDefault();
  var hasEventDate = firstEventDate != null;

  var eventDate =  firstEventDate ?? AsItem("");


  // Check if this event exists - if not, 404 not-found
  if (eventData == null) {
    <h1>@App.Resources.String("LabelEventNotExists")</h1>
    <p>@App.Resources.String("LabelEventNotExistsText")</p>

    @helpers.BackToListButton();
    Kit.Page.SetHttpStatus(404);
    return ;
  }

  var item = hasEventDate ? eventDate.Child("Event") : eventData;
  var registrations = AsItems(MyData["Registrations"]);
  var freeSeats = (eventDate == null ? 0 : eventDate.Int("Seats")) - registrations.Count();

  // Dates to show in various scenarios
  var eventStart = hasEventDate ? eventDate.DateTime("Start").ToString("d") : "";
  var eventEnd = (hasEventDate && !eventDate.Bool("EndDateIsStartDate")) ? " - " + eventDate.DateTime("End").ToString("d") : "";

  // Set page title
  var titleSuffix = hasEventDate
    ? " | " + eventStart + eventEnd
    : "";
  Kit.Page.SetTitle(item.String("Title") + titleSuffix + " | ");

  // Prepare toolbar without "new"
  var itemToolbar = Kit.Toolbar.Default().New("-");
}

<div class="app-events6 app-events6-detail" @itemToolbar.For(item)>
  <div class="app-events6-detail-content mb-4">
    <h1 class="m-0">@helpers.Title(item, eventDate)</h1>

    <div class="event-meta">
      @if (hasEventDate) {
        <span class="app-events6-date">@eventStart @eventEnd</span>
      }
      <span class="app-events6-categories">@(item.Child("Category") != null ? " | " + item.Child("Category").String("Title") : "")</span>
    </div>

  </div>

  <div class="app-events6-detail-content">
    <div class="row">
      <div class='@(Kit.Css.Is("bs3") ? "col-xs-12" : "col-12") @(Text.Has(item.String("Image")) ? "col-md-8" : "") order-1 order-md-0'>
        <h2 class="h5">@item.String("ShortDescription")</h2>
        @* Show main body, with possible Inner-Content *@
        <div class="app-events6-detail-body mb-4">
          @Kit.Render.All(item, field: "BodyContentBlocks", merge: item.String("Description"))
        </div>

        @Html.Partial("Details.PartDates.cshtml", new { item, hasEventDate, eventDate })

        <div class="app-events6-detail-infos row mb-4">
          @* Event Location *@
          @helpers.DetailsBox(App.Resources.String("Location"), Text.First(eventDate.String("Location"), item.String("Location")))

          @* Event Leader *@
          @helpers.DetailsBox(App.Resources.String("Management"), Text.First(eventDate.String("Person"), item.String("Person")))
          @* Event Fee *@
          @helpers.DetailsBox(App.Resources.String("Fee"), Text.First(eventDate.String("Fee"), item.String("Fee")))
          @* Event Registration / Seat Info *@
          @if (hasEventDate && eventDate.Bool("RegistrationEnabled") && eventDate.Bool("IsFullyBooked") == false && eventDate.Bool("IsCancelled") == false && eventDate.Int("Seats") != null) {
            @helpers.DetailsBox(App.Resources.String("Seats"), freeSeats.ToString())
          }
          @* Event Time *@
          @helpers.DetailsBox(App.Resources.String("DateTime"), eventDate.String("TimeSpecifics"))

          @* Event more detail file/link *@
          @{
            var moreDetailsLink = Text.First(eventDate.String("Document"), item.String("Document"));
          }

          @if (Text.Has(moreDetailsLink)) {
            var fileName = System.IO.Path.GetFileName(moreDetailsLink);
            <div class="col-12 col-md-6 mb-3 app-events6-infocontainer">
              <h6>@App.Resources.String("DetailsLink")</h6>
              <a href="@moreDetailsLink" target="_blank">@fileName</a>
            </div>
          }
        </div>

        @* Event Status (Registration, Canceled, Overbooked) *@
        @{
          var addBackButton = true;
        }
        @if (hasEventDate && eventDate.Bool("IsCancelled") == true) {
          <div class="alert alert-warning">
            @App.Resources.String("StatusCanceled")
          </div>
        } else if (App.Settings.Bool("RegistrationEnabled") && hasEventDate && eventDate.Bool("RegistrationEnabled")) {
          if (freeSeats <= 0 || eventDate.Bool("IsFullyBooked")) { // Turn 1 back to freeSeats after fix
            <div class="alert alert-warning">
              @App.Resources.String("StatusFullyBooked")
            </div>
          } else {
            @* 2dm: parameters are added to current page /details is an url key for the view *@
            @* var registerLink = Link.To(parameters: MyPage.Parameters.Set("mid", MyContext.Module.Id).Set("courseId", item.Id).Set("dateId", eventDate.Id).Set(item.UrlKey));  *@
            var registerParams = "mid=" + MyContext.Module.Id + "&courseId=" + item.Id + "&dateId=" + eventDate.Id + "&" + item.String("UrlKey");
            addBackButton = false;  // disable this, as we'll add now so it's before the register button
            @helpers.BackToListButton()
            <a class="btn btn-md btn-primary" href="@Link.To(parameters: registerParams)">@Html.Raw(App.Resources.String("ButtonRegister"))</a>
          }
        }
        @if (addBackButton) {
          @helpers.BackToListButton()
        }
      </div>

      @if (Text.Has(item.String("Image"))) {
        <div class="col-12 col-md-4 mb-4 mb-md-0">
          @Kit.Image.Picture(item.Field("Image"), factor: "1/3", imgClass:"img-fluid d-block m-auto", imgAltFallback: item.String("Title"))
        </div>
      }
    </div>
  </div>
</div>

@Html.Partial("shared/Assets.cshtml")