// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/copilot-data
// To extend it, create a "Registrations.cs" with this contents:
/*
namespace AppCode.Data
{
  public partial class Registrations
  {
    // Add your own properties and methods here
  }
}
*/

// Generator:   CSharpDataModelsGenerator v17.99.00
// App/Edition: Events, Courses and Registration/staging
// User:        2sic Web-Developer
// When:        2024-06-17 14:29:51Z
using System;
using System.Collections.Generic;
using ToSic.Sxc.Data;

namespace AppCode.Data
{
  // This is a generated class for Registrations 
  // To extend/modify it, see instructions above.

  /// <summary>
  /// Registrations data. <br/>
  /// Generated 2024-06-17 14:29:51Z. Re-generate whenever you change the ContentType. <br/>
  /// <br/>
  /// Default properties such as `.Title` or `.Id` are provided in the base class. <br/>
  /// Most properties have a simple access, such as `.BirthDate`. <br/>
  /// For other properties or uses, use methods such as
  /// .IsNotEmpty("FieldName"), .String("FieldName"), .Children(...), .Picture(...), .Html(...).
  /// </summary>
  public partial class Registrations: AutoGenerated.ZAutoGenRegistrations
  {  }
}

namespace AppCode.Data.AutoGenerated
{
  /// <summary>
  /// Auto-Generated base class for Default.Registrations in separate namespace and special name to avoid accidental use.
  /// </summary>
  public abstract class ZAutoGenRegistrations: Custom.Data.CustomItem
  {
    /// <summary>
    /// BirthDate as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("BirthDate", scrubHtml: true) etc.
    /// </summary>
    public string BirthDate => _item.String("BirthDate", fallback: "");

    /// <summary>
    /// Country as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Country", scrubHtml: true) etc.
    /// </summary>
    public string Country => _item.String("Country", fallback: "");

    /// <summary>
    /// Course as single item of ITypedItem.
    /// </summary>
    /// <remarks>
    /// Generated to only return 1 child because field settings had Multi-Value=false. 
    /// </remarks>
    /// <returns>
    /// A single item OR null if nothing found, so you can use ?? to provide alternate objects.
    /// </returns>
    public ITypedItem Course => _course ??= _item.Child("Course");
    private ITypedItem _course;

    /// <summary>
    /// EventDate as single item of EventDate.
    /// </summary>
    /// <remarks>
    /// Generated to only return 1 child because field settings had Multi-Value=false. The type EventDate was specified in the field settings.
    /// </remarks>
    /// <returns>
    /// A single item OR null if nothing found, so you can use ?? to provide alternate objects.
    /// </returns>
    public EventDate EventDate => _eventDate ??= _item.Child<EventDate>("EventDate");
    private EventDate _eventDate;

    /// <summary>
    /// FirstName as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("FirstName", scrubHtml: true) etc.
    /// </summary>
    public string FirstName => _item.String("FirstName", fallback: "");

    /// <summary>
    /// LastName as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("LastName", scrubHtml: true) etc.
    /// </summary>
    public string LastName => _item.String("LastName", fallback: "");

    /// <summary>
    /// Mail as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Mail", scrubHtml: true) etc.
    /// </summary>
    public string Mail => _item.String("Mail", fallback: "");

    /// <summary>
    /// MobilePhone as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("MobilePhone", scrubHtml: true) etc.
    /// </summary>
    public string MobilePhone => _item.String("MobilePhone", fallback: "");

    /// <summary>
    /// Nationality as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Nationality", scrubHtml: true) etc.
    /// </summary>
    public string Nationality => _item.String("Nationality", fallback: "");

    /// <summary>
    /// Phone as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Phone", scrubHtml: true) etc.
    /// </summary>
    public string Phone => _item.String("Phone", fallback: "");

    /// <summary>
    /// Salutation as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Salutation", scrubHtml: true) etc.
    /// </summary>
    public string Salutation => _item.String("Salutation", fallback: "");

    /// <summary>
    /// SenderIp as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("SenderIp", scrubHtml: true) etc.
    /// </summary>
    public string SenderIp => _item.String("SenderIp", fallback: "");

    /// <summary>
    /// Status as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Status", scrubHtml: true) etc.
    /// </summary>
    public string Status => _item.String("Status", fallback: "");

    /// <summary>
    /// Street as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Street", scrubHtml: true) etc.
    /// </summary>
    public string Street => _item.String("Street", fallback: "");

    /// <summary>
    /// SubmitDate as DateTime.
    /// </summary>
    public DateTime SubmitDate => _item.DateTime("SubmitDate");

    /// <summary>
    /// ZIPCity as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("ZIPCity", scrubHtml: true) etc.
    /// </summary>
    public string ZIPCity => _item.String("ZIPCity", fallback: "");
  }
}