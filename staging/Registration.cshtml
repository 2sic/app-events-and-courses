@inherits Custom.Hybrid.RazorTyped
@using ToSic.Razor.Blade;
@using System;
@using System.Text.RegularExpressions;
@{
  var fieldBuilder = GetCode("shared/FieldBuilder.cs");
  
  var course = AsItem(MyData["Course"]);
  var eventDate = AsItem(MyData["EventDate"]);
  var title = course == null ? "" : course.String("Title");
  Kit.Page.SetTitle(App.Resources.String("CourseRegistrationTitle") + " | " + title);
}

@* Show warning if 404, event not found *@
@if (course == null)
{
  <div class="alert alert-danger" role="alert">
    <span class="sr-only">Error:</span>
    @App.Resources.String("CourseNotFoundError")
  </div>
  <a href="@Link.To()" class='btn @(Kit.Css.Is("bs3") ? "btn-default" : "btn-outline-primary")'>@Html.Raw(App.Resources.String("LabelBackToList"))</a>

  Kit.Page.SetHttpStatus(404);
  return;
}

@* additional text in title if set *@
@{
  var titleAddition = (Text.Has(eventDate.String("TitleAddition"))) 
    ? " " + App.Resources.String("TitleAdditionPrefix") + " " + eventDate.String("TitleAddition") + " " + App.Resources.String("TitleAdditionSuffix") 
    : "";

  var Edition = MyView.Edition;
}

<div class="app-events6 app-events6-form" 
  @Kit.Edit.TagToolbar(eventDate) 
  events-@UniqueKey
  data-string-required="@App.Resources.String("ValidationRequired")" 
  data-string-email="@App.Resources.String("ValidationEmail")"
  data-webservice="app/auto/@Edition/api/Form/ProcessForm"
>
  @* Title *@
  <h1 class="mb-4">@App.Resources.String("CourseRegistrationTitle") - @course.String("Title") @titleAddition</h1>

  <div class="form app-events6-form">
    @* Inputs *@
    @{
      var inputTitle = course.String("Title") + titleAddition;
      var courseNumber = (eventDate.Int("Id") != null) ? eventDate.Int("Id") : course.Int("id");
    }
    @if (Text.Has(courseNumber)) {
      @fieldBuilder.Text("CourseNumber", false, true, courseNumber)
    }
    @fieldBuilder.Text("CourseName", true, true, inputTitle)
    @fieldBuilder.Text("CourseLocation", true, true, Text.First(eventDate.String("Location"), course.String("Location")))

    @* Event Notes *@
    @{
      var compDate = eventDate.DateTime("Start").ToString("d") + (!eventDate.Bool("EndDateIsStartDate") ? " - " + eventDate.DateTime("End").ToString("d") : "");
    }
    @fieldBuilder.Multiline("CourseDate", true, true, (Text.First(eventDate.String("TimeSpecifics"), compDate)))

    @* Salutation *@
    @fieldBuilder.Radio("Saluation", true, 
      new string[] {
        App.Resources.String("LabelMr"),
		    App.Resources.String("LabelMrs")
      }
    )

    @* Inputs *@
    @fieldBuilder.Text("FirstName", true)
    @fieldBuilder.Text("LastName", true)
    @fieldBuilder.Text("Street", true)
    @fieldBuilder.Text("ZIPCity", true)


    @* Country Select *@
    @fieldBuilder.DropDown("Country", true, App.Resources.String("CountrySelection").Split('\n'))

    @* Inputs *@
    @fieldBuilder.Text("Phone", false)
    @fieldBuilder.Text("MobilePhone", false)
    @fieldBuilder.EMail("Mail", true)

    @* Terms *@
    @fieldBuilder.Checkbox("AcceptAgb", true)
    @fieldBuilder.Checkbox("AcceptCosts", true)

    @* Submit Button *@

    <div class="mb-3 row">
      <div class="col-md-9 offset-sm-3">
        @{
          var detailslink = Link.To();
        }
        <a href="@detailslink" class='btn @(Kit.Css.Is("bs3") ? "btn-default" : "btn-outline-primary")'>@Html.Raw(App.Resources.String("LabelBack"))</a>
        <button type="button" app-events6-send class="btn btn-primary">@Html.Raw(App.Resources.String("ButtonRegister"))</button>
      </div>
    </div>
    <input type="hidden" id="EventDate" name="EventDate" value="@eventDate.Guid">
    <input type="hidden" id="Course" name="Course" value="@course.Guid">

    @* Response Messages *@
    @AddHiddenMessage(App.Resources.String("MessageSending"), "warning", "msgSending")
    @AddHiddenMessage(App.Resources.String("ValidationRequired"), "danger", "msgIncomplete")
    @AddHiddenMessage(App.Resources.String("CourseRegistrationError"), "danger", "msgError")
    <div id="msgOk" class="alert alert-success app-events6-message" role="alert">
      <strong>@Html.Raw(App.Resources.String("SuccessThanks"))</strong>
      @Html.Raw(App.Resources.String("SuccessMessage"))
    </div>

    @* if is required, because all app-events6-config-warning are shown after submit *@
    @if (!Text.Has(App.Settings.String("OwnerMail")) || !Text.Has(App.Settings.String("MailFrom"))) {
      <div id="msgOk" class="alert alert-warning" role="alert">
        @Html.Raw(App.Resources.String("MessageDefaultMailSettings", scrubHtml: "p"))
      </div>      
    }

    @if (App.Settings.Bool("Recaptcha") )  { @Html.Partial("Registration.PartRecaptcha.cshtml") }
  </div>
</div>

@functions {
  object AddHiddenMessage(string message, string type = "warning", string id = "", string attribute = "") {
    var classes = "alert alert-" + type + " app-events6-message";
    var rawMessage = Kit.Scrub.Only(message, "p");
    var messageDiv = Tag.Div(rawMessage).Class(classes).Id(id).Attr("role", "alert");
    if (attribute != "") { messageDiv.Attr(attribute, ""); }
    return messageDiv;
  }
}

@Html.Partial("shared/Assets.cshtml")