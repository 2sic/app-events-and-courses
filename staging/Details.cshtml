@inherits AppCode.Razor.DetailRazor
@using ToSic.Razor.Blade
@using AppCode.Data
@using AppCode

@{
  // Data from Query - Stream "Event" contains the event, "Current" contains the selected date (if any)
  var eventItem = As<Event>(MyData.GetStream("Event"));

  // Check if this event exists - if not, 404 not-found
  if (eventItem == null) 
  {
    <h1>@App.Resources.LabelEventNotExists</h1>
    <p>@App.Resources.LabelEventNotExistsText</p>

    @BackToListButton();
    Kit.Page.SetHttpStatus(404);
    return;
  }

  // Get firstEventData by Current
  var firstEventDate = As<EventDate>(MyData.GetStream("Current"));
  
  // Check if this event has a date
  var hasEventDate = firstEventDate != null;

  // If event-date has a Date, use firstEeventDate Event, else use eventItem
  var item = firstEventDate?.Event ?? eventItem;
  // Get all registrations for this event and calculate free seats, make sure never < 0
  var registrations = firstEventDate?.Registrations ?? new List<Registrations>();
  var freeSeats = (firstEventDate?.Seats ?? 0) - registrations.Count();
  freeSeats = freeSeats < 0 ? 0 : freeSeats;

  // Dates to show in various places

  var eventStart = hasEventDate ? firstEventDate.Start.ToString("dd/MM/yyyy HH:mm") : "";
  var eventEnd = (hasEventDate && !firstEventDate.EndDateIsStartDate) ? " - " + firstEventDate.End.ToString("dd/MM/yyyy HH:mm") : "";

  // Set page title
  var titleSuffix = hasEventDate
    ? " | " + eventStart + eventEnd
    : "";

  var title = item.Title + titleSuffix + " | ";
  AddMetaTags(item, title, titleSuffix);
    

  // Prepare toolbar without "new"
  var itemToolbar = Kit.Toolbar.Default().New("-");

  // Stack the event date info from the first event date or the event itself
  var eventDateInfo = AsStack<EventDate>(firstEventDate, item);

  if (App.Settings.GoogleEventsApi) {
    // Get JsonLd for a EventPosting
    Kit.Page.AddJsonLd(GetJsonLdForEventDetail(eventDateInfo));
  }
}

<div class="app-events6 app-events6-detail" itemscope itemtype="https://schema.org/Event" @itemToolbar.For(item)>
  <div class="app-events6-detail-content mb-4">
    <h1 class="m-0" itemprop="name">@Title(item, firstEventDate)</h1>

    <div class="event-meta">
      @if (hasEventDate) {
        <div class="app-events6-date d-inline-block"><span itemprop="startDate">@eventStart</span> <span itemprop="endDate">@eventEnd</span></div>
      }
      <span class="app-events6-categories">@(item.IsNotEmpty("Category.Title") ? " | " + item.Category.Title : "")</span>    </div>
  </div>

  <div class="app-events6-detail-content">
    <div class="row">
      <div class='@(Kit.Css.Is("bs3") ? "col-xs-12" : "col-12") @(item.IsNotEmpty("Image") ? "col-md-8" : "") order-1 order-md-0'>
        <h2 class="h5">@item.ShortDescription</h2>
        @* Show main body, with possible Inner-Content *@
        <div class="app-events6-detail-body mb-4" itemprop="description">
          @Kit.Render.All(item, field: "BodyContentBlocks", merge: item.Description)
        </div>

        @Html.Partial("Details.PartDates.cshtml", new { item, hasEventDate, firstEventDate })

        <div class="app-events6-detail-infos row mb-4">
          @* Event Location *@
          @DetailsBox(App.Resources.Location, eventDateInfo.Location, "location")

          @* Event Leader *@
          @DetailsBox(App.Resources.Management, eventDateInfo.Person, "performer")

          @* Event Fee *@
          @DetailsBox(App.Resources.Fee, eventDateInfo.Fee, "offers")

          @* Event Registration / Seat Info *@
          @if (hasEventDate 
            && firstEventDate.RegistrationEnabled 
            && !firstEventDate.IsFullyBooked 
            && !firstEventDate.IsCancelled 
            && firstEventDate.Seats != null) {
            @DetailsBox(App.Resources.Seats, freeSeats.ToString())
          }

          @* Event Time *@
          @DetailsBox(App.Resources.DateTime, eventDateInfo.TimeSpecifics)

          @* Event more detail file/link *@
          @if (eventDateInfo.IsNotEmpty("Document"))
          {
            var fileName = System.IO.Path.GetFileName(eventDateInfo.Document);
            <div class="col-12 col-md-6 mb-3 app-events6-infocontainer">
              <h6>@App.Resources.DetailsLink</h6>
              <a href="@eventDateInfo.Document" target="_blank">@fileName</a>
            </div>
          }
        </div>

        @* Event Status (Registration, Canceled, Overbooked) *@
        @{
          var addBackButton = true;
        }
        @if (hasEventDate && firstEventDate.IsCancelled == true)
        {
          <div class="alert alert-warning">
            @App.Resources.StatusCanceled
          </div>
        } else if (App.Settings.RegistrationEnabled && hasEventDate && firstEventDate.RegistrationEnabled)
        {
          if (freeSeats <= 0 || firstEventDate.IsFullyBooked)
          {
            <div class="alert alert-warning">
              @App.Resources.StatusFullyBooked
            </div>
          } else {
            var registerParams = "mid=" + MyContext.Module.Id + "&courseId=" + item.Id + "&dateId=" + firstEventDate.Id + "&" + item.UrlKey;
            addBackButton = false;  // disable this, as we'll add now so it's before the register button
            @BackToListButton()
            <a class="btn btn-md btn-primary" rel="nofollow" href="@Link.To(parameters: registerParams)">@Html.Raw(App.Resources.ButtonRegister)</a>
          }
        }
        @if (addBackButton) {
          @BackToListButton()
        }
      </div>

      @if (item.IsNotEmpty("Image"))
      {
        <div class="col-12 col-md-4 mb-4 mb-md-0">
          @item.Picture("Image", factor: "1/3", imgClass:"img-fluid d-block m-auto", imgAltFallback: item.Title)
        </div>
      }
    </div>
  </div>
</div>

@Html.Partial("Assets.cshtml")